name: Self‑Hosted MATLAB CI

# Manuel tetikleme ve main branch için otomatik tetikleme
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  matlab-ci:
    # Self‑hosted runner etiketi
    runs-on: [self-hosted, linux, matlab]
    timeout-minutes: 120

    steps:
      # 1) Kod deposunu çek
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) MATLAB’ı license bilgisiyle başlat
      - name: Setup MATLAB with License
        uses: matlab-actions/setup-matlab@v2
        with:
          release: 'R2025a'                            # Kullandığınız sürüm
          license-file: ${{ secrets.MATLAB_LICENSE_FILE }}
          license-server: ${{ secrets.ML_LICENSE_SERVER }}

      # 3) Birim testleri çalıştır (JUnit XML olarak çıktı)
      - name: Run MATLAB Unit Tests
        run: |
          matlab -batch "results = runtests(...
                        'IncludeSubfolders',true,...
                        'TestRunner','JUnit',...
                        'TestResultsFile','test-results/results.xml');"
      - name: Upload JUnit Test Results
        uses: actions/upload-artifact@v4
        with:
          name: junit-results
          path: test-results/results.xml

      # 4) Kod kapsamı ölçümü (Cobertura XML)
      - name: Generate Code Coverage
        run: |
          matlab -batch "cov = coverage('code'); report(cov,...
                        'Cobertura','code-coverage/coverage.xml');"
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: cobertura-coverage
          path: code-coverage/coverage.xml

      # 5) İsterseniz statik PDF rapor (publish)
      - name: Publish PDF Report
        run: |
          matlab -batch "options=struct('format','pdf','outputDir','reports'); publish('main.m',options);"
      - name: Upload PDF Report
        uses: actions/upload-artifact@v4
        with:
          name: pdf-report
          path: reports/*.pdf

      # 6) İsterseniz PowerPoint sunum (Live Script export)
      - name: Export Live Script to PPTX
        run: |
          matlab -batch "export('presentation.mlx','pptx');"
      - name: Upload PPTX
        uses: actions/upload-artifact@v4
        with:
          name: pptx-report
          path: presentation.pptx


# 
# # This is a basic workflow to help you get started with MATLAB Actions 
# 
# 
# 
# name: MATLAB Build 
# 
# 
# 
# # Controls when the action will run.  
# 
# on: 
# 
#   # Triggers the workflow on push or pull request events but only for the main branch 
# 
#   push: 
# 
#     branches: [ main ] 
# 
#   pull_request: 
# 
#     branches: [ main ] 
# 
# 
# 
#   # Allows you to run this workflow manually from the Actions tab 
# 
#   workflow_dispatch: 
# 
# 
# 
# jobs: 
# 
#   # This workflow contains a single job called "build" 
# 
#   build: 
# 
#     # The type of runner that the job will run on 
# 
#     runs-on: ubuntu-latest
# 
# 
#     # Steps represent a sequence of tasks that will be executed as part of the job 
# 
#     steps: 
# 
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it 
# 
#       - uses: actions/checkout@v4 
# 
# 
# 
#       # Sets up MATLAB on a GitHub-hosted runner 
# 
#       - name: Set up MATLAB 
# 
#         uses: matlab-actions/setup-matlab@v2 
# 
# 
# 
#       # Runs a set of commands using the runners shell 
# 
#       - name: Run all tests 
# 
#         uses: matlab-actions/run-tests@v2 
# 
#         with: 
# 
#           source-folder: code 
# 
#      - name: PDF Raporu Üret (publish)
#   run: matlab -batch "options = struct('format','pdf','outputDir','reports'); publish('analysis.m','options');"
# 
#     - name: PPTX Sunum Üret (Live Script export)
#   run: matlab -batch "export('presentation.mlx','pptx');"


      # You can use "run-build" to invoke the MATLAB build tool and run build tasks 

      #- name: Run the default "test" task in the build file 

      #   uses: matlab-actions/run-build@v2 

  

      # You can use "run-command" to execute custom MATLAB scripts, functions, or statements 

      #- name: Run custom testing procedure 

      #  uses: matlab-actions/run-command@v2 

      #  with: 

      #    command: disp('Running my custom testing procedure!'); addpath('code'); results = runtests('IncludeSubfolders', true); assertSuccess(results); 

# # This is a basic workflow to help you get started with MATLAB Actions
# 
# name: MATLAB Build
# 
# # Controls when the action will run. 
# on:
#   # Triggers the workflow on push or pull request events but only for the main branch
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]
# 
#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:
# 
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest
# 
#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v4
# 
#       # Sets up MATLAB on a GitHub-hosted runner
#       - name: Set up MATLAB
#         uses: matlab-actions/setup-matlab@v2
# 
#       # Runs a set of commands using the runners shell
#       - name: Run all tests
#         uses: matlab-actions/run-tests@v2
#         with:
#           source-folder: code

      # You can use "run-build" to invoke the MATLAB build tool and run build tasks
      #- name: Run the default "test" task in the build file
      #   uses: matlab-actions/run-build@v2

      # You can use "run-command" to execute custom MATLAB scripts, functions, or statements
      #- name: Run custom testing procedure
      #  uses: matlab-actions/run-command@v2
      #  with:
      #    command: disp('Running my custom testing procedure!'); addpath('code'); results = runtests('IncludeSubfolders', true); assertSuccess(results);
